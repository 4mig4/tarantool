env = require('test_run')
---
...
test_run = env.new()
---
...
engine = test_run:get_cfg('engine')
---
...
NULL = require('msgpack').NULL
---
...
--
-- gh-1557: NULL in indexes.
--
format = {}
---
...
format[1] = { name = 'field1', type = 'unsigned' }
---
...
format[2] = { name = 'field2', type = 'unsigned', is_nullable = true }
---
...
s = box.schema.space.create('test', { engine = engine, format = format })
---
...
-- Bad nullable value.
format[2].is_nullable = 100
---
...
s:format(format) -- Fail.
---
- error: 'Wrong space format (field 2): ''is_nullable'' must be boolean'
...
-- Primary can not be nullable.
parts = {}
---
...
parts[1] = {field = 2, type = 'unsigned', is_nullable = true}
---
...
pk = s:create_index('pk', { parts = parts }) -- Fail.
---
- error: Primary index of the space 'test' can not contain nullable parts
...
pk = s:create_index('pk')
---
...
-- Not TREE nullable.
-- Do not print errmsg, because Vinyl's one is different - it does
-- not support HASH.
ok = pcall(s.create_index, s, 'sk', { parts = parts, type = 'hash' }) -- Fail.
---
...
ok
---
- false
...
-- Conflict of is_nullable in format and in parts.
parts[1].is_nullable = false
---
...
sk = s:create_index('sk', { parts = parts }) -- Fail.
---
- error: Field 2 is nullable in space format, but not nullable in index parts
...
-- Try skip nullable in format and specify in part.
parts[1].is_nullable = true
---
...
sk = s:create_index('sk', { parts = parts }) -- Ok.
---
...
format[2].is_nullable = nil
---
...
s:format(format) -- Fail.
---
- error: Field 2 is not nullable in space format, but nullable in index parts
...
sk:drop()
---
...
-- Try to set nullable in part with no format.
s:format({})
---
...
sk = s:create_index('sk', { parts = parts })
---
...
-- And then set format with no nullable.
s:format(format) -- Fail.
---
- error: Field 2 is not nullable in space format, but nullable in index parts
...
format[2].is_nullable = true
---
...
s:format(format) -- Ok.
---
...
-- Test insert.
s:insert{1, 1}
---
- [1, 1]
...
s:insert{2, NULL}
---
- [2, null]
...
s:insert{3, NULL}
---
- [3, null]
...
s:insert{4, 1} -- Fail.
---
- error: Duplicate key exists in unique index 'sk' in space 'test'
...
s:insert{4, 4}
---
- [4, 4]
...
s:insert{5, NULL}
---
- [5, null]
...
pk:select{}
---
- - [1, 1]
  - [2, null]
  - [3, null]
  - [4, 4]
  - [5, null]
...
sk:select{}
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 4]
...
-- Test exact match.
sk:get({1})
---
- [1, 1]
...
sk:get({NULL}) -- Fail.
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
sk:update({1}, {})
---
- [1, 1]
...
sk:update({NULL}, {}) -- Fail.
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
_ = sk:delete({1})
---
...
sk:delete({NULL}) -- Fail.
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
s:insert({1, 1})
---
- [1, 1]
...
-- Test iterators.
sk:select{NULL}
---
- - [2, null]
  - [3, null]
  - [5, null]
...
sk:select({NULL}, {iterator = 'LE'})
---
- - [5, null]
  - [3, null]
  - [2, null]
...
sk:select({NULL}, {iterator = 'LT'})
---
- []
...
sk:select({NULL}, {iterator = 'GE'})
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 4]
...
sk:select({NULL}, {iterator = 'GT'})
---
- - [1, 1]
  - [4, 4]
...
_ = sk:delete{NULL}
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
sk:select{}
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 4]
...
pk:select{}
---
- - [1, 1]
  - [2, null]
  - [3, null]
  - [4, 4]
  - [5, null]
...
-- Test snapshot during iterator (Vinyl restore).
create_iterator = require('utils').create_iterator
---
...
iter = create_iterator(sk, {NULL})
---
...
iter.next()
---
- [2, null]
...
box.snapshot()
---
- ok
...
iter.iterate_over()
---
- 0: [3, null]
  1: [5, null]
...
sk:select{}
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 4]
...
pk:select{}
---
- - [1, 1]
  - [2, null]
  - [3, null]
  - [4, 4]
  - [5, null]
...
-- Test replace.
s:replace{2, 2}
---
- [2, 2]
...
s:replace{3, NULL} -- no changes.
---
- [3, null]
...
s:replace{6, NULL}
---
- [6, null]
...
pk:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, null]
  - [4, 4]
  - [5, null]
  - [6, null]
...
sk:select{}
---
- - [3, null]
  - [5, null]
  - [6, null]
  - [1, 1]
  - [2, 2]
  - [4, 4]
...
-- Test not unique indexes.
s:truncate()
---
...
sk:drop()
---
...
sk = s:create_index('sk', { parts = parts, unique = false })
---
...
s:insert{1, 1}
---
- [1, 1]
...
s:insert{2, NULL}
---
- [2, null]
...
s:insert{3, NULL}
---
- [3, null]
...
s:insert{4, 1}
---
- [4, 1]
...
s:insert{5, NULL}
---
- [5, null]
...
pk:select{}
---
- - [1, 1]
  - [2, null]
  - [3, null]
  - [4, 1]
  - [5, null]
...
sk:select{}
---
- - [2, null]
  - [3, null]
  - [5, null]
  - [1, 1]
  - [4, 1]
...
-- Test several secondary indexes.
s:truncate()
---
...
format[2].is_nullable = true
---
...
format[3] = { name = 'field3', type = 'unsigned', is_nullable = true }
---
...
s:format(format)
---
...
parts[1].field = 3
---
...
sk2 = s:create_index('sk2', { parts = parts })
---
...
s:replace{4, 3, 4}
---
- [4, 3, 4]
...
s:replace{3, 3, 3}
---
- [3, 3, 3]
...
s:replace{2, NULL, NULL}
---
- [2, null, null]
...
s:replace{1, NULL, 1}
---
- [1, null, 1]
...
s:replace{0, 0, NULL}
---
- [0, 0, null]
...
pk:select{}
---
- - [0, 0, null]
  - [1, null, 1]
  - [2, null, null]
  - [3, 3, 3]
  - [4, 3, 4]
...
sk:select{}
---
- - [1, null, 1]
  - [2, null, null]
  - [0, 0, null]
  - [3, 3, 3]
  - [4, 3, 4]
...
sk2:select{}
---
- - [0, 0, null]
  - [2, null, null]
  - [1, null, 1]
  - [3, 3, 3]
  - [4, 3, 4]
...
-- Check duplicate conflict on replace.
s:replace{4, 4, 3} -- fail
---
- error: Duplicate key exists in unique index 'sk2' in space 'test'
...
s:replace{4, 4, NULL} -- ok
---
- [4, 4, null]
...
pk:select{}
---
- - [0, 0, null]
  - [1, null, 1]
  - [2, null, null]
  - [3, 3, 3]
  - [4, 4, null]
...
sk:select{}
---
- - [1, null, 1]
  - [2, null, null]
  - [0, 0, null]
  - [3, 3, 3]
  - [4, 4, null]
...
sk2:select{}
---
- - [0, 0, null]
  - [2, null, null]
  - [4, 4, null]
  - [1, null, 1]
  - [3, 3, 3]
...
_ = pk:delete{2}
---
...
pk:select{}
---
- - [0, 0, null]
  - [1, null, 1]
  - [3, 3, 3]
  - [4, 4, null]
...
sk:select{}
---
- - [1, null, 1]
  - [0, 0, null]
  - [3, 3, 3]
  - [4, 4, null]
...
sk2:select{}
---
- - [0, 0, null]
  - [4, 4, null]
  - [1, null, 1]
  - [3, 3, 3]
...
s:drop()
---
...
